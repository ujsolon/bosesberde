AWSTemplateFormatVersion: '2010-09-09'
Description: 'Recruiter Insights MCP Server with API Gateway and Lambda using streamable HTTP'

Parameters:
  LogLevel:
    Type: String
    Default: INFO
    AllowedValues: [DEBUG, INFO, WARNING, ERROR]
    Description: Lambda function log level

Resources:
  # S3 bucket for resumes
  ResumesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-resumes-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # Lambda execution role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt ResumesBucket.Arn
                  - !Sub '${ResumesBucket.Arn}/*'

  # Lambda function
  MCPLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-mcp-server'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Placeholder - will be updated with deployment package"}
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Architectures:
        - x86_64
      Environment:
        Variables:
          LOG_LEVEL: !Ref LogLevel
          S3_BUCKET_NAME: !Ref ResumesBucket
          RESUME_FOLDER: 'resumes/'
      Timeout: 300
      MemorySize: 1024

  # Lambda permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MCPLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/*'

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      Description: 'Recruiter Insights MCP Server API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: 'mcp'

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MCPLambdaFunction.Arn}/invocations'

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ApiGatewayMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: 'prod'

  MCPEndpointParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: '/mcp/endpoints/serverless/recruiter-insights'
      Type: String
      Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/mcp'
      Description: 'Recruiter Insights MCP Server endpoint URL'

Outputs:
  ApiUrl:
    Description: 'API Gateway URL for MCP server'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/mcp'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  S3BucketName:
    Description: 'S3 bucket name for resumes'
    Value: !Ref ResumesBucket
    Export:
      Name: !Sub '${AWS::StackName}-S3BucketName'

  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref MCPLambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  SSMParameterName:
    Description: 'SSM Parameter name for MCP endpoint'
    Value: '/mcp/endpoints/serverless/recruiter-insights'
    Export:
      Name: !Sub '${AWS::StackName}-SSMParameterName'
